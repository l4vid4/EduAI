spring.application.name=flight-booking-assistant

# spring.ai.chat.client.enabled=false

spring.threads.virtual.enabled=true

spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver
spring.datasource.username=root
spring.datasource.password=
spring.datasource.url=jdbc:mysql://10.1.40.87:3306/ms_atmosphere?useUnicode=true&characterEncoding=utf-8&useSSL=false&serverTimezone=GMT%2B8

###################
# Anthropic Claude 3
###################

spring.ai.anthropic.api-key=${ANTHROPIC_API_KEY}
spring.ai.anthropic.chat.options.model=claude-3-7-sonnet-20250219

###################
# ??AI
###################

spring.ai.zhipuai.api-key=
spring.ai.zhipuai.chat.options.model=glm-4-long

###################
# Groq
###################

#spring.ai.openai.api-key=
#spring.ai.openai.base-url=https://api.groq.com/openai
#spring.ai.openai.chat.options.model=llama-3.3-70b-versatile

# 

# When asked for users' flight details, do not rely on pervious conversation memory (history) but always call the function.


###################
# OpenAI
###################
#spring.ai.openai.api-key=${OPENAI.APIKEY}
#spring.ai.openai.chat.options.model=gpt-4o

# spring.ai.openai.chat.options.functions=getBookingDetails,changeBooking,cancelBooking

###################
# Chroma
################### 
spring.ai.vectorstore.chroma.client.host=http://localhost
spring.ai.vectorstore.chroma.client.port=8000
spring.ai.vectorstore.chroma.initialize-schema=true


# Disable the OpenAI embedding when the local huggingface embedding (e.g. spring-ai-transformers-spring-boot-starter) is used.
# spring.ai.openai.embedding.enabled=false

###################
# Azure OpenAI
###################
# spring.ai.azure.openai.api-key=${AZURE_OPENAI_API_KEY}
# spring.ai.azure.openai.endpoint=${AZURE_OPENAI_ENDPOINT}
# spring.ai.azure.openai.chat.options.deployment-name=gpt-4o

###################
# Mistral AI
###################

# spring.ai.mistralai.api-key=${MISTRAL_AI_API_KEY}
# spring.ai.mistralai.chat.options.model=mistral-small-latest

# spring.ai.mistralai.chat.options.model=mistral-small-latest
# spring.ai.mistralai.chat.options.functions=getBookingDetails,changeBooking,cancelBooking
# # spring.ai.retry.on-client-errors=true
# # spring.ai.retry.exclude-on-http-codes=429

###################
# Vertex AI Gemini
###################

# spring.ai.vertex.ai.gemini.project-id=${VERTEX_AI_GEMINI_PROJECT_ID}
# spring.ai.vertex.ai.gemini.location=${VERTEX_AI_GEMINI_LOCATION}
# spring.ai.vertex.ai.gemini.chat.options.model=gemini-1.5-pro-001
# # spring.ai.vertex.ai.gemini.chat.options.model=gemini-1.5-flash-001
# spring.ai.vertex.ai.gemini.chat.options.transport-type=REST

# spring.ai.vertex.ai.gemini.chat.options.functions=getBookingDetails,changeBooking,cancelBooking

###################
#  Milvus Vector Store
###################
# Change the dimentions to 384 if the local huggingface embedding (e.g. spring-ai-transformers-spring-boot-starter) is used.
# spring.ai.vectorstore.milvus.embedding-dimension=384

###################
# PGVector
###################
# spring.datasource.url=jdbc:postgresql://localhost:5432/postgres
# spring.datasource.username=postgres
# spring.datasource.password=postgres
# spring.ai.vectorstore.pgvector.initialize-schema=true

###################
# QDrant
###################
# spring.ai.vectorstore.qdrant.host=localhost
# spring.ai.vectorstore.qdrant.port=6334



# Enable context propagation for Reactor (required for Observability with streaming)
spring.reactor.context-propagation=auto


## metrics
management.endpoints.web.exposure.include=health, info, metrics, prometheus
management.metrics.distribution.percentiles-histogram.http.server.requests=true
management.observations.key-values.application=flight-booking-assistant

## percentiles histogram
management.metrics.distribution.percentiles-histogram.gen_ai.client.operation=true
management.metrics.distribution.percentiles-histogram.db.vector.client.operation=true
management.metrics.distribution.percentiles-histogram.spring.ai.chat.client=true
management.metrics.distribution.percentiles-histogram.spring.ai.tool=true

## logging
# logging.pattern.correlation=[${spring.application.name:},%X{traceId:-},%X{spanId:-}]

## tracing
management.tracing.sampling.probability=1.0
management.zipkin.tracing.endpoint=http://localhost:9411/api/v2/spans


# disable PDF reader logs
logging.level.com.zaxxer.hikari=ERROR
logging.level.org.springframework.ai=ERROR
logging.level.org.apache.fontbox.ttf=ERROR
logging.level.org.apache.pdfbox.pdmodel.font=OFF
logging.level.org.apache.fontbox.ttf=OFF
logging.level.org.atmosphere=OFF


######################################
# Spring AI observability settings
######################################

spring.ai.tools.observations.include-content=true

## Include the Chatclient input in observations
spring.ai.chat.client.observation.log-input=true

## Include the VectorStore query and response in observations
spring.ai.vectorstore.observations.log-query-response=true

## Include prompt and completion contents in observations
spring.ai.chat.observations.log-prompt=true
spring.ai.chat.observations.log-completion=true

## Include error logging in observations (note: not needed for Spring Web apps)
spring.ai.chat.observations.include-error-logging=true

logging.level.org.springframework.ai.chat.observation=DEBUG

##
# spring.ai.mcp.client.stdio.servers-configuration=classpath:/mcp-servers-config2.json
# spring.ai.mcp.client.toolcallback.enabled=true
vaadin.featureFlags.devModeHandler=false
